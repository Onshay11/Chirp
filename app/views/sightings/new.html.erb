
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Report a Sighting</title>

</head>

<body>

<div class="form">
    <%= form_for(@sighting) do |f| %>
    
    
    <div class="fields-container">
        <div class = "checkbox">
            <%=f.label :behavior, "Behavior" %> 
            <div class="checkbox-choice">
                <%= f.check_box(:singing) %>
                <%= label_tag(:singing, "Singing") %>
            </div>
            <div class="checkbox-choice">
                <%= f.check_box(:aggressive) %>
                <%= label_tag(:aggressive, "Aggressive") %>
            </div>
            <div class="checkbox-choice">
                <%= f.check_box(:flying) %>
                <%= label_tag(:flying, "Flying") %>
            </div>
            <div class="checkbox-choice">
                <%= f.check_box(:other) %>
                <%= label_tag(:other, "Other") %>
            </div>
        </div>
        
        <div class = "field">
            <div class="field-choice">
                <%=f.label :notes, "Notes" %>
                <%=f.text_area :notes %>
            </div>
            
            
            
            <div class="location">
                <div class="field-choice">
                    <%=f.label :location, "Location" %> 
                    <%=f.text_area :location %>
                    <%= f.hidden_field :user_id, value: current_user.id %>
                </div>
                <br />
                Try out our interactive map! Type in your location to drop a map marker. Feel free to move the marker around
                if you want a more specific location.
                <br />
                

                <div class="map-container">
                    <div id='map'></div>
                    <div class="side-panel">
                         <div id='geocoder-container'></div>
                         <div class="location-div"><pre id='coordinates' class='coordinates'></pre></div>
                    </div>
                </div>
            <div>
        </div>
        
        <br />
        <br />
        
    </div>
    
    <div class = "actions">
            <%=f.submit "Submit" %>
    </div>
    
    <% end %>
    
    
    <%= link_to 'Home', root_path %>

</div>




<script>

    
    mapboxgl.accessToken = 'pk.eyJ1IjoibXBlbGljaGV0IiwiYSI6ImNpZ3doNWVvYzBzNXN2cW0zd2N5ZnBvY2YifQ.2RlTuIjDz1pLYOP4YpdKyw';
    var map = new mapboxgl.Map({
        container: 'map', // container id
        style: 'mapbox://styles/mapbox/streets-v9',
        center: [-74.50, 40], // starting position
        zoom: 9 // starting zoom
    });
    
    map.on('mousemove', function (e) {
        document.getElementById('info').innerHTML =
            // e.point is the x, y coordinates of the mousemove event relative
            // to the top-left corner of the map
            JSON.stringify(e.point) + '<br />' +
                // e.lngLat is the longitude, latitude geographical position of the event
            JSON.stringify(e.lngLat);
    })
    
    
    //geocoder option
    
    var isDragging;
    
    // Is the cursor over a point? if this
    // flag is active, we listen for a mousedown event.
    var isCursorOverPoint;
    
    var coordinates = document.getElementById('coordinates');
    
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v9',
        center: [0, 0],
        zoom: 2
    });
    
    var canvas = map.getCanvasContainer();
    
    var geojson = {
        "type": "FeatureCollection",
        "features": [{
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [0, 0]
            }
        }]
    };
    
    var geocoder = new mapboxgl.Geocoder({
        container: 'geocoder-container' // Optional. Specify a unique container for the control to be added to.
    });
    
    function mouseDown() {
        if (!isCursorOverPoint) return;
    
        isDragging = true;
    
        // Set a cursor indicator
        canvas.style.cursor = 'grab';
    
        // Mouse events
        map.on('mousemove', onMove);
        map.on('mouseup', onUp);
    }
    
    function onMove(e) {
        if (!isDragging) return;
        var coords = e.lngLat;
    
        // Set a UI indicator for dragging.
        canvas.style.cursor = 'grabbing';
    
        // Update the Point feature in `geojson` coordinates
        // and call setData to the source layer `point` on it.
        geojson.features[0].geometry.coordinates = [coords.lng, coords.lat];
        map.getSource('single-point').setData(geojson);
    }
    
    function onUp(e) {
        if (!isDragging) return;
        var coords = e.lngLat;
    
        // Print the coordinates of where the point had
        // finished being dragged to on the map.
        coordinates.style.display = 'block';
        coordinates.innerHTML = 'Longitude: ' + coords.lng + '<br />Latitude: ' + coords.lat;
        canvas.style.cursor = '';
        isDragging = false;
    }
    
    
    map.addControl(geocoder);
    
    // After the map style has loaded on the page, add a source layer and default
    // styling for a single point.
    map.on('click', function() {
      
        map.addSource('single-point', {
            "type": "geojson",
            "data": {
                "type": "FeatureCollection",
                "features": []
            }
        });
    
        map.addLayer({
            "id": "point",
            "source": "single-point",
            "type": "circle",
            "paint": {
                "circle-radius": 10,
                "circle-color": "#007cbf"
            }
        });
        
        // If a feature is found on map movement,
        // set a flag to permit a mousedown events.
        map.on('mousemove', function(e) {
            var features = map.queryRenderedFeatures(e.point, { layers: ['point'] });
    
            // Change point and cursor style as a UI indicator
            // and set a flag to enable other mouse events.
            if (features.length) {
                map.setPaintProperty('point', 'circle-color', '#3bb2d0');
                canvas.style.cursor = 'move';
                isCursorOverPoint = true;
                map.dragPan.disable();
            } else {
                map.setPaintProperty('point', 'circle-color', '#3887be');
                canvas.style.cursor = '';
                isCursorOverPoint = false;
                map.dragPan.enable();
            }
        });
    
        // Set `true` to dispatch the event before other functions call it. This
        // is necessary for disabling the default map dragging behaviour.
        map.on('mousedown', mouseDown, true);
        
    
        //Listen for the `geocoder.input` event that is triggered when a user
        // makes a selection and add a symbol that matches the result.
        geocoder.on('result', function(ev) {
            map.getSource('single-point').setData(ev.result.geometry);
        });
    });
    
    function handle(e){
        if(e.keyCode === 13){
            e.preventDefault(); // Ensure it is only this code that rusn

            alert("Enter was pressed was presses");
        }
    }
    
    handle(geocoder);

</script>

</body>





<br />


</html>


